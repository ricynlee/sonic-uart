% point-by-point loop
clc;
clear;

fs = 48e3; % sampling freq

snr = 60;

n = 128*384;

init_beta = 0.8;
init_fflim = 0.1;
adjcoef_beta = 1;
adjcoef_fflim = 1;

alpha = 0.22; % phi ctrl
beta = init_beta; % frq ctrl
fflim = init_fflim; % frq fluctuation lim

% kaiser len=16, fs=24000(750), fpass=750(23.4375), fstop=11250, apass=0.1, astop=80
hbf = [-1.00565929571123e-05,-0.000321623413532287,0.00199470588834347,0.00750258131670068,-0.0214172449746208,-0.0521987304211924,0.123744402545264,0.440705965651995,0.440705965651995,0.123744402545264,-0.0521987304211924,-0.0214172449746208,0.00750258131670068,0.00199470588834347,-0.000321623413532287,-1.00565929571123e-05];
% kaiser len=128, fs=12000, fpass=750, fstop=1250, apass=0.1, astop=83.5
lpf12k = [9.02066018368156e-06,1.47146669044470e-05,1.61263137389339e-05,8.36971724868580e-06,-1.14243566349565e-05,-4.14028243603962e-05,-7.33568493648115e-05,-9.34228974243534e-05,-8.57779880072831e-05,-3.88699872491052e-05,4.75818004373267e-05,0.000157561627528463,0.000258585874502042,0.000308226459248327,0.000267039417592598,0.000114928782541558,-0.000134334583601472,-0.000426637736610233,-0.000674070310034469,-0.000775990612521527,-0.000651111180603454,-0.000272055513271638,0.000309383871499698,0.000957812776710881,0.00147769250649465,0.00166367467102975,0.00136715170910193,0.000560190518785614,-0.000625486697300812,-0.00190341734857556,-0.00288956489440250,-0.00320442537962824,-0.00259627872245236,-0.00104985191066245,0.00115787661807726,0.00348351469031493,0.00523287158194523,0.00574734583134558,0.00461602924949001,0.00185201785725053,-0.00202858461573343,-0.00606729811070622,-0.00907033021918942,-0.00992536811557056,-0.00795199199938506,-0.00318686416700240,0.00349195854790376,0.0104653748736718,0.0157069302183590,0.0172931437219755,0.0139756395029551,0.00566684550283199,-0.00630534642857666,-0.0192748016756516,-0.0296710625174893,-0.0337440854734465,-0.0284317144017534,-0.0121708268783935,0.0145507107854594,0.0490564027534398,0.0868227419137602,0.122253252530521,0.149732253247598,0.164732783595156,0.164732783595156,0.149732253247598,0.122253252530521,0.0868227419137602,0.0490564027534398,0.0145507107854594,-0.0121708268783935,-0.0284317144017534,-0.0337440854734465,-0.0296710625174893,-0.0192748016756516,-0.00630534642857666,0.00566684550283199,0.0139756395029551,0.0172931437219755,0.0157069302183590,0.0104653748736718,0.00349195854790376,-0.00318686416700240,-0.00795199199938506,-0.00992536811557056,-0.00907033021918942,-0.00606729811070622,-0.00202858461573343,0.00185201785725053,0.00461602924949001,0.00574734583134558,0.00523287158194523,0.00348351469031493,0.00115787661807726,-0.00104985191066245,-0.00259627872245236,-0.00320442537962824,-0.00288956489440250,-0.00190341734857556,-0.000625486697300812,0.000560190518785614,0.00136715170910193,0.00166367467102975,0.00147769250649465,0.000957812776710881,0.000309383871499698,-0.000272055513271638,-0.000651111180603454,-0.000775990612521527,-0.000674070310034469,-0.000426637736610233,-0.000134334583601472,0.000114928782541558,0.000267039417592598,0.000308226459248327,0.000258585874502042,0.000157561627528463,4.75818004373267e-05,-3.88699872491052e-05,-8.57779880072831e-05,-9.34228974243534e-05,-7.33568493648115e-05,-4.14028243603962e-05,-1.14243566349565e-05,8.36971724868580e-06,1.61263137389339e-05,1.47146669044470e-05,9.02066018368156e-06];
% kaiser len=128, fs=375, fpass=12, fstop=22, apass=0.1, stop=56.5
lpf375 = [-9.99968450065325e-05,-0.000156546909191046,-0.000214778322760653,-0.000265655386708692,-0.000298604885303209,-0.000302662752355082,-0.000267918223431375,-0.000187118740925449,-5.72549176126639e-05,0.000119082833506083,0.000332790105087810,0.000567970815919313,0.000802443290073578,0.00100910571908534,0.00115814547278149,0.00121997423635400,0.00116866767527704,0.000985596169394247,0.000662864152071523,0.000206140547997639,-0.000363530060685835,-0.00100929217568238,-0.00167967660109365,-0.00231154571959587,-0.00283473096838627,-0.00317811967316950,-0.00327676401938176,-0.00307942292406862,-0.00255582732893773,-0.00170289793732419,-0.000549154193940429,0.000843359261334511,0.00238013830627169,0.00393855486198982,0.00537545646759178,0.00653771233449551,0.00727507590221235,0.00745445105323837,0.00697442551164714,0.00577879680721180,0.00386778354988650,0.00130569902305440,-0.00177593363015395,-0.00518053503789420,-0.00865420482731580,-0.0118988964589503,-0.0145904150713250,-0.0164001685958496,-0.0170192123603464,-0.0161828385734924,-0.0136938053585917,-0.00944229586684823,-0.00342085420208453,0.00426714476513342,0.0134064902347514,0.0236770477803361,0.0346684375927299,0.0459017134176132,0.0568567053348529,0.0670032092535221,0.0758338595474324,0.0828963404866453,0.0878225952283341,0.0903528808305800,0.0903528808305800,0.0878225952283341,0.0828963404866453,0.0758338595474324,0.0670032092535221,0.0568567053348529,0.0459017134176132,0.0346684375927299,0.0236770477803361,0.0134064902347514,0.00426714476513342,-0.00342085420208453,-0.00944229586684823,-0.0136938053585917,-0.0161828385734924,-0.0170192123603464,-0.0164001685958496,-0.0145904150713250,-0.0118988964589503,-0.00865420482731580,-0.00518053503789420,-0.00177593363015395,0.00130569902305440,0.00386778354988650,0.00577879680721180,0.00697442551164714,0.00745445105323837,0.00727507590221235,0.00653771233449551,0.00537545646759178,0.00393855486198982,0.00238013830627169,0.000843359261334511,-0.000549154193940429,-0.00170289793732419,-0.00255582732893773,-0.00307942292406862,-0.00327676401938176,-0.00317811967316950,-0.00283473096838627,-0.00231154571959587,-0.00167967660109365,-0.00100929217568238,-0.000363530060685835,0.000206140547997639,0.000662864152071523,0.000985596169394247,0.00116866767527704,0.00121997423635400,0.00115814547278149,0.00100910571908534,0.000802443290073578,0.000567970815919313,0.000332790105087810,0.000119082833506083,-5.72549176126639e-05,-0.000187118740925449,-0.000267918223431375,-0.000302662752355082,-0.000298604885303209,-0.000265655386708692,-0.000214778322760653,-0.000156546909191046,-9.99968450065325e-05];

t = (0:n-1)/fs;

frqt = 18000 + 6*rand()-3;
amp = 10^(2*rand()-1);
sig = amp*cos(2*pi*frqt.*t + rand()*2*pi) + 10^(-snr/20)*randn(1, n)./sqrt(2);

phir = zeros(1, n);
frqr = [18000, zeros(1, n-1)];
loi = zeros(1, n);
loq = zeros(1, n);

z0 = zeros(2, length(hbf));
z1 = zeros(2, length(hbf));
z2 = zeros(2, length(lpf12k));
z3 = zeros(2, length(hbf));
z4 = zeros(2, length(hbf));
z5 = zeros(2, length(hbf));
z6 = zeros(2, length(lpf375));

bbi = zeros(1, fix(n/128));
bbq = zeros(1, fix(n/128));

frqr_sample = zeros(1, 8);
lock = zeros(1, n);

phie = zeros(1, n);
for i=1:n
    % 48k
    loi(i) = cos(phir(i));
    loq(i) = -sin(phir(i));
    
    if i<n
        phir(i+1) = phir(i) + 2*pi*frqr(i)/fs;
        frqr(i+1) = frqr(i);
    end

    z0 = [[loi(i)*sig(i); loq(i)*sig(i)], z0(:, 1:length(hbf)-1)];
    filtered = sum([hbf;hbf].*z0, 2);

    if mod(i-1, 2)==0
        % 24k
        z1 = [filtered, z1(:, 1:length(hbf)-1)];
        filtered = sum([hbf;hbf].*z1, 2);

        if mod(i-1, 4)==0
            % 12k
            z2 = [filtered, z2(:, 1:length(lpf12k)-1)];
            filtered = sum([lpf12k;lpf12k].*z2, 2);
            
                bbi(i) = filtered(1);
                bbq(i) = filtered(2);

                if mod(i-1, 128)==0
                    phie(i) = atan(bbq(i)/bbi(i));
                    if i<n
                        frqr(i+1) = frqr(i+1) + beta*phie(i);
                        phir(i+1) = phir(i+1) + alpha*phie(i);
                    end
                end
            
            if 0 && mod(i-1, 16)==0
                % 3k
                z3 = [filtered, z3(:, 1:length(hbf)-1)];
                filtered = sum([hbf;hbf].*z3, 2);
                                
                if 0 && mod(i-1, 32)==0
                    % 1500
                    z4 = [filtered, z4(:, 1:length(hbf)-1)];
                    filtered = sum([hbf;hbf].*z4, 2);
                    
                    if mod(i-1, 64)==0
                        % 750
                        z5 = [filtered, z5(:, 1:length(hbf)-1)];
                        filtered = sum([hbf;hbf].*z5, 2);
                        
                        if mod(i-1, 128)==0
                            % 375
                            z6 = [filtered, z6(:, 1:length(lpf375)-1)];
                            filtered = sum([lpf375;lpf375].*z6, 2);
                            
                            bbi(i) = filtered(1);
                            bbq(i) = filtered(2);
                            
                            phie(i) = atan(bbq(i)/bbi(i));
%                             frqr_sample = [frqr(i), frqr_sample(1:length(frqr_sample)-1)];
%                             lock(i) = (max(frqr_sample) - min(frqr_sample) < fflim);
%                             if lock(i)
%                                 beta = beta * adjcoef_beta;
%                                 fflim = fflim * adjcoef_fflim;
%                             else
%                                 beta = beta / adjcoef_beta;
%                                 fflim = fflim / adjcoef_fflim;
%                                 if beta > init_beta, beta = init_beta; end
%                                 if fflim > init_fflim; fflim = init_fflim; end
%                             end
                            if i<n
                                frqr(i+1) = frqr(i+1) + beta*phie(i);
                                phir(i+1) = phir(i+1) + alpha*phie(i);
                            end
                        end
                    end
                end
            end
        end
    end
end

clf;
set(gcf, 'renderer', 'painters');

subplot(1,3,1);
title(sprintf('Freq following\nTx=%.2f \\Delta=%.2f', frqt, frqr(n)-frqt), 'interpreter', 'tex');
hold on;
plot(t, frqr, 'g-', 'linesmooth', 'on');
% plot(t, frqt+lock*4-2, 'c');
plot([t(1), t(n)], [frqt, frqt]);
hold off;
ylim([18000-20, 18000+20]);
xlim([t(1), t(n)]);
grid on;
set(gca, 'yticklabel', get(gca, 'ytick')); % cannnot get rid of yaxis exponent if opengl is used

subplot(1,3,2);
title('Measured phase error');
hold on;
plot(t, phie, 'g', 'linesmooth', 'on');
plot([t(1), t(n)], [0, 0], 'linesmooth', 'on');
hold off;
ylim([-pi/2, pi/2]);
xlim([t(1), t(n)]);
grid on;

subplot(1,3,3);
hold on;
plot(bbi, '.-');
plot(bbq, 'r.-');
hold off;

% title(sprintf('Normalized waveform\nAmplitude=%.2f', amp));
% hold on;
% plot(t(n-16:n), abs(loi(n-16:n)), 'g', 'linesmooth', 'on');
% plot(t(n-16:n), abs(sig(n-16:n)/amp), 'b.-', 'linesmooth', 'on');
% hold off;
% ylim([-.2, 1.6]);
% xlim([t(n-16), t(n)]);
% grid on;

#pragma once

// parameter that can be overriden in makefile
#define SAMPLES_PER_CHIP 128 // for frequency spreading, 64~512
#define CAPTURE_THRESH (1)
#define DECISION_THRESH (1)

// oscillator for frequency mixing
static const float SIN[8] = {0, -0.353553390593274, 0.5, -0.353553390593274, 0, 0.353553390593273, -0.5, 0.353553390593274}; // -sin
static const float COS[8] = {0.5, -0.353553390593274, 0, 0.353553390593274, -0.5, 0.353553390593275, 0, -0.353553390593274};
static const double PI = 3.1415926535897932384626433;

// fir lpf: eq ripple, fs=48k, fpass=750, fstop=2000, ripple=1db, attenuation=108db
static const float B[] = {-7.33712295186706e-06, -1.19098694995046e-05, -2.12270824704319e-05, -3.49923466274049e-05, -5.45374241482932e-05, -8.14190061646514e-05, -0.000117392526590265, -0.000164412282174453, -0.000224599672947079, -0.000300198968034238, -0.000393526104744524, -0.000506901065818965, -0.000642562052235007, -0.000802567170467228, -0.000988686457276344, -0.00120228179730475, -0.00144417630508542, -0.00171451957430691, -0.00201265420764685, -0.00233698450028896, -0.00268485234118998, -0.00305242580361664, -0.00343461008742452, -0.00382498092949390, -0.00421574804931879, -0.00459775142371655, -0.00496049737557769, -0.00529223727062345, -0.00558009184896946, -0.00581021420657635, -0.00596800679340959, -0.00603837566450238, -0.00600602990016341, -0.00585581175982952, -0.00557305989786983, -0.00514399213716388, -0.00455610221251845, -0.00379856070503593, -0.00286260526627302, -0.00174191326368600, -0.000432942673796788, 0.00106476759538054, 0.00274835107848048, 0.00461143022403121, 0.00664400262758136, 0.00883240997791290, 0.0111593836918473, 0.0136041855439544, 0.0161428283900023, 0.0187483895570040, 0.0213913954794407, 0.0240402966737747, 0.0266619957983494, 0.0292224306613207, 0.0316872112452984, 0.0340222641825676, 0.0361945182085037, 0.0381725504994392, 0.0399272404611111, 0.0414323620498180, 0.0426651537418366, 0.0436067767441273, 0.0442427396774292, 0.0445632115006447, 0.0445632115006447, 0.0442427396774292, 0.0436067767441273, 0.0426651537418366, 0.0414323620498180, 0.0399272404611111, 0.0381725504994392, 0.0361945182085037, 0.0340222641825676, 0.0316872112452984, 0.0292224306613207, 0.0266619957983494, 0.0240402966737747, 0.0213913954794407, 0.0187483895570040, 0.0161428283900023, 0.0136041855439544, 0.0111593836918473, 0.00883240997791290, 0.00664400262758136, 0.00461143022403121, 0.00274835107848048, 0.00106476759538054, -0.000432942673796788, -0.00174191326368600, -0.00286260526627302, -0.00379856070503593, -0.00455610221251845, -0.00514399213716388, -0.00557305989786983, -0.00585581175982952, -0.00600602990016341, -0.00603837566450238, -0.00596800679340959, -0.00581021420657635, -0.00558009184896946, -0.00529223727062345, -0.00496049737557769, -0.00459775142371655, -0.00421574804931879, -0.00382498092949390, -0.00343461008742452, -0.00305242580361664, -0.00268485234118998, -0.00233698450028896, -0.00201265420764685, -0.00171451957430691, -0.00144417630508542, -0.00120228179730475, -0.000988686457276344, -0.000802567170467228, -0.000642562052235007, -0.000506901065818965, -0.000393526104744524, -0.000300198968034238, -0.000224599672947079, -0.000164412282174453, -0.000117392526590265, -8.14190061646514e-05, -5.45374241482932e-05, -3.49923466274049e-05, -2.12270824704319e-05, -1.19098694995046e-05, -7.33712295186706e-06};
static const int ORDER = sizeof(B)/sizeof(B[0])-1;

// maximum-length sequence for frequency spreading/despreading
static const char MSEQ[] = {1,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,1,1,1,1,0,1,0,0,0,1,1,1,0,0,1,0,0,1,0,1,1,0,1,1,1,0,1,1,0,0,1,1,0,1,0,1,0,1,1,1,1,1};
static const int CHIPS = sizeof(MSEQ)/sizeof(MSEQ[0]);

// others
static const int SAMPLE_RATE = 48000;
static const int CHANNELS = 2;
static const int ASYNC_ACCUM = SAMPLES_PER_CHIP/16;
static const int SYNC_ACCUM = SAMPLES_PER_CHIP;
static const int SAMPLES_PER_BIT = 1024;

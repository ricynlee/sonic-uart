#pragma once

#define PI 3.1415926535897932384626433

// fir lpf: kaiser win, fs=48k, fpass=750, fstop=1200, ripple=1db, attenuation=25db
#define LPF_COEF {0.00323248474800766,0.00341121901342408,0.00354043287435739,0.00361486147941774,0.00362990165094776,0.00358172662821808,0.00346739301787512,0.00328493784523272,0.00303346369827736,0.00271321009190362,0.00232560935148027,0.00187332552027135,0.00136027503176679,0.000791628152273114,0.000173790487284370,-0.000485635847193166,-0.00117791146487034,-0.00189323910564847,-0.00262086259714419,-0.00334918445573330,-0.00406590087447166,-0.00475815253104020,-0.00541268935309986,-0.00601604710646551,-0.00655473342833562,-0.00701542071806652,-0.00738514312577998,-0.00765149474800123,-0.00780282605245685,-0.00782843551334176,-0.00771875344526418,-0.00746551507939154,-0.00706192002893901,-0.00650277544214257,-0.00578462033751411,-0.00490582885597019,-0.00386669044409368,-0.00266946529835247,-0.00131841374694390,0.000180201381138810,0.00181813995689834,0.00358523747143389,0.00546948540925826,0.00745713839187177,0.00953284699712183,0.0116798147603736,0.0138799774825452,0.0161142026138886,0.0183625061569499,0.0206042842428824,0.0228185562871214,0.0249842164276578,0.0270802897953071,0.0290861900632833,0.0309819746749972,0.0327485941554144,0.0343681319727539,0.0358240315330925,0.0371013070590076,0.0381867353223180,0.0390690254670064,0.0397389644675092,0.0401895361149986,0.0404160118046930,0.0404160118046930,0.0401895361149986,0.0397389644675092,0.0390690254670064,0.0381867353223180,0.0371013070590076,0.0358240315330925,0.0343681319727539,0.0327485941554144,0.0309819746749972,0.0290861900632833,0.0270802897953071,0.0249842164276578,0.0228185562871214,0.0206042842428824,0.0183625061569499,0.0161142026138886,0.0138799774825452,0.0116798147603736,0.00953284699712183,0.00745713839187177,0.00546948540925826,0.00358523747143389,0.00181813995689834,0.000180201381138810,-0.00131841374694390,-0.00266946529835247,-0.00386669044409368,-0.00490582885597019,-0.00578462033751411,-0.00650277544214257,-0.00706192002893901,-0.00746551507939154,-0.00771875344526418,-0.00782843551334176,-0.00780282605245685,-0.00765149474800123,-0.00738514312577998,-0.00701542071806652,-0.00655473342833562,-0.00601604710646551,-0.00541268935309986,-0.00475815253104020,-0.00406590087447166,-0.00334918445573330,-0.00262086259714419,-0.00189323910564847,-0.00117791146487034,-0.000485635847193166,0.000173790487284370,0.000791628152273114,0.00136027503176679,0.00187332552027135,0.00232560935148027,0.00271321009190362,0.00303346369827736,0.00328493784523272,0.00346739301787512,0.00358172662821808,0.00362990165094776,0.00361486147941774,0.00354043287435739,0.00341121901342408,0.00323248474800766}

// misc
#define SAMPLE_RATE 48000
#define CARRIER_FRQ 18000

// noise measuring
#define NOISE_BODY 16384

// chirp as preamble
#define CHIRP_BODY 2048
#define BUBBLE_BODY 128
#define CARRIER_BODY (16384-CHIRP_BODY*2-BUBBLE_BODY*3)

// symbol
#define SYMBOL_BODY 2048

#define LENGTH_BITS 7

#define TX_BUF_DEPTH 512    // common divisor of samples per chip and samples per symbol
                            // >ORDER
                            // cannot be too small (e.g., <256) in case of overflow/underflow

#define BPSK 1
#define QPSK 2
#define QAM16 4

#define MODEM BPSK

// typedefs
typedef struct {
    union {
        float L;
        float I;
    };
    union {
        float R;
        float Q;
    };
} sample_t;

// declarations
class fir_filter {
public:
    fir_filter(const float* const, int);
    ~fir_filter();
    sample_t filter(const sample_t&);
private:
    void* data;
};

float chirp(size_t);
